Title:Implement HTTPS security into you full-stack application

description:Secure your React and Express application using Docker, Nginx, and Letsencrypt.

react, express, letsencrypt, docker

body: 

In this post, I want to show how to overcome the hurdle of integrating HTTPS security into both the front-end and back-end of your React and Express application.

Why do I need HTTPS?

There are two main reasons why you would want to implement HTTPS security in your web app.  As you may have guessed, the first reason it's due to application security and information encryption. Following the HTTPS protocol signifies that all incoming and outgoing information is being encrypted and that malicious attackers will not be able to intercept the information and decipher it.  

Prerequisites:
Docker
Dokcer-compose

{"title":"Implement HTTPS security into you full-stack application","description":"Secure your React and Express application using Docker, Nginx, and Letsencrypt.","images":1,"imagesIds":[3],"paragraphs":0,"words":273,"readingTime":1,"publish":false,"mainImage":3,"mainImageId":3,"mainBody":"In this post, I want to show how to overcome the hurdle of integrating HTTPS security into the front-end and back-end of your React and Express application.\n\n### Why do I need HTTPS?\n\nThere are two main reasons as to why you will want to implement HTTPS security in your web app. The first reason is for information security and data encryption. The HTTPS protocol uses cryptographic algorithms to encrypt and decrypt messages , which prevents malicious attackers from intercepting and deciphering the application content. The second reason is to prevent your application from showing a  “Not Secure” warning that will appear at the top left corner of most browers. This warning is likely to scare away potential users.\n\n### Prerequisites:\n- Docker\n- Docker Compose\n- Domain name with DNS records pointing at target machine\n\n## Installation\n`1.  Clone project\n``` bash\ngit clone https://github.com/munikeraragon/react-express-letsencrypt-nginx-boilerplate.git\n```\n`2. cd into folder\n``` bash\ncd react-express-letsencrypt-nginx-boilerplate\n```\n\n`3. Edit init-letsecncrypt.sh by replacing \"example.com\" and \"www.example.com\" with your domain name\n\n`4. Edit ./data/nginx/app.conf by replacing \"example.com\" with your domain name\n\n`5. Edit ./server/index.js by replacing \"example.com\" with your domain name\n\n`6. Generate Letsencrypt certificates\n\n``` bash \nsudo ./init-letsencrypt.sh\n```\n\n`7. Create \"nodecert\" group to allow Express server to read letsencrypt certifictes \n\n``` bash\n# Create group \"nodecert\" with gid=1024\nsudo groupadd nodecert -g 1024\n\n# Add root to the group \"nodecert\"\nsudo usermod -a -G nodecert root\n\n# make group \"nodecert\" owner of files recursively \nsudo chgrp -R nodecert data/certbot/conf/live\nsudo chgrp -R nodecert data/certbot/conf/archive\n\n# change permission of files to be accesible by group \"nodecert\"\nsudo chmod -R 750 data/certbot/conf/live\nsudo chmod -R 750 data/certbot/conf/archive\n```\n\n`8. Build docker-compose services\n``` bash\ndocker-compose build\n```\n\n## Usage\n`1. Run docker-compose services\n``` bash\ndocker-compose up\n```\n\n`2. Access React client at https://your_domain_name.com and Express server at https://your_domain_name.com:5000\n\n","tags":["react","express","letsencrypt","docker"],"creationDate":"August 12th 2021"}